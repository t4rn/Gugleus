// <auto-generated />
using Gugleus.Core.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Gugleus.WebUI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Gugleus.Core.Domain.Dictionaries.RequestStatus", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code");

                    b.Property<DateTime>("AddDate")
                        .HasColumnName("add_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("Ghost")
                        .HasColumnName("ghost");

                    b.HasKey("Code");

                    b.ToTable("dic_request_status","he");
                });

            modelBuilder.Entity("Gugleus.Core.Domain.Dictionaries.RequestType", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code");

                    b.Property<DateTime>("AddDate")
                        .HasColumnName("add_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("Ghost")
                        .HasColumnName("ghost");

                    b.HasKey("Code");

                    b.ToTable("dic_request_type","he");
                });

            modelBuilder.Entity("Gugleus.Core.Domain.Requests.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("AddDate")
                        .HasColumnName("add_date");

                    b.Property<string>("Input")
                        .HasColumnName("request_input");

                    b.Property<string>("Output")
                        .HasColumnName("request_output");

                    b.Property<DateTime?>("OutputDate")
                        .HasColumnName("output_date");

                    b.Property<string>("TypeCode")
                        .HasColumnName("id_request_type");

                    b.Property<int>("WsClientId")
                        .HasColumnName("id_ws_client");

                    b.HasKey("Id");

                    b.HasIndex("TypeCode");

                    b.HasIndex("WsClientId");

                    b.ToTable("requests","he");
                });

            modelBuilder.Entity("Gugleus.Core.Domain.Requests.RequestQueue", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddDate")
                        .HasColumnName("add_date");

                    b.Property<string>("ErrorMsg")
                        .HasColumnName("error_msg");

                    b.Property<DateTime?>("ProcessEndDate")
                        .HasColumnName("process_end_date");

                    b.Property<DateTime?>("ProcessStartDate")
                        .HasColumnName("process_start_date");

                    b.Property<string>("StatusCode")
                        .HasColumnName("id_status");

                    b.HasKey("RequestId");

                    b.HasIndex("StatusCode");

                    b.ToTable("requests_queue","he");
                });

            modelBuilder.Entity("Gugleus.Core.Domain.WsClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("AddDate")
                        .HasColumnName("add_date");

                    b.Property<bool>("Ghost")
                        .HasColumnName("ghost");

                    b.Property<string>("Hash")
                        .HasColumnName("hash");

                    b.Property<string>("Name")
                        .HasColumnName("client_name");

                    b.HasKey("Id");

                    b.ToTable("ws_clients","he");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gugleus.Core.Domain.Requests.Request", b =>
                {
                    b.HasOne("Gugleus.Core.Domain.Dictionaries.RequestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeCode");

                    b.HasOne("Gugleus.Core.Domain.WsClient", "WsClient")
                        .WithMany()
                        .HasForeignKey("WsClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gugleus.Core.Domain.Requests.RequestQueue", b =>
                {
                    b.HasOne("Gugleus.Core.Domain.Requests.Request", "Request")
                        .WithOne("Queue")
                        .HasForeignKey("Gugleus.Core.Domain.Requests.RequestQueue", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gugleus.Core.Domain.Dictionaries.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
